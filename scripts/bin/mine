#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Tim Henderson (tadh@case.edu)
#
# This file is part of jpdg a library to generate Program Dependence Graphs
# from JVM bytecode.
#
# Copyright (c) 2014, Tim Henderson, Case Western Reserve University
#   Cleveland, Ohio 44106
#   All Rights Reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc.,
#   51 Franklin Street, Fifth Floor,
#   Boston, MA  02110-1301
#   USA
# or retrieve version 2.1 at their website:
#   http://www.gnu.org/licenses/lgpl-2.1.html


import os, sys, time, subprocess, tempfile, shutil
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO

import optutils
from optutils import output, log, error_codes, add_code

from jpdg import config, mine
from jpdg.slicer import Slicer
from jpdg.dotty import dotty

__version__ = 'git master'

add_code('version')
add_code('config')
add_code('jpdg')
add_code('parsemis')

def version():
    '''Print version and exits'''
    log('version :', __version__)
    sys.exit(error_codes['version'])

@optutils.main(
    'usage: mine [-c subjects.conf] <subject> <command>',
    '''
    Example:

        $ mine jgit validate

    Options
        -h, help                      print this message
        -v, version                   print the version
        -c, config=<config>           config for subjects

    Specs
        <subject>                     name of the subject to process
        <config>                      configuration file path

    Configuration File Format
        The config file should be written in json. By default `mine` looks at
        $(pwd)/subjects.conf, and $HOME/.jpdg-subjects.conf for files and
        cascades them (with the current working directory taking precedence).

        Schema
            {
                "subjects" : {
                    subject_name: {
                        "base_dir": <path>,
                        "classpath": <path>,
                        "lib_dirs": [ <path> ],
                        "class_dirs": [ <path> ],
                        "target": <path>,
                    }
                }
            }

        Specs
            <path>                    a file path. May contain shell vars
    ''',
    'hvc:',
    ['help', 'version', 'config=']
)
def main(argv, util, parser):
    """
    The main entry point to the program
    """

    @util.command(
        'print the runtime config for a subject',
        '''
        mine <subject> validate


        Options
            -h, help                      print this message
        ''',
        'h',
        ['help',],
    )
    def validate(argv, util, parser, conf, name, subject):

        opts, args = parser(argv)
        for opt, arg in opts:
            if opt in ('-h', '--help',):
                util.usage()

        print 'running with', name, subject


    @util.command(
        'runs jpdg on the subject',
        '''
        mine <subject> jpdg -o <path>

        Options
            -h, help                      print this message
            -o, output=<path>             (required) where to put the output
            --no-build-jpdg               don't build jpdg
            --jpdg-logs                   show the jpdg log output
        ''',
        'ho:',
        ['help', 'output=', 'no-build-jpdg', 'jpdg-logs'],
    )
    def jpdg(argv, util, parser, conf, name, subject):

        output = None
        no_build = False
        jpdg_logs = False
        opts, args = parser(argv)
        for opt, arg in opts:
            if opt in ('-h', '--help',):
                util.usage()
            elif opt in ('-o', '--output',):
                output = os.path.abspath(arg)
            elif opt in ('--no-build-jpdg',):
                no_build = True
            elif opt in ('--jpdg-logs',):
                jpdg_logs = True

        if output is None:
            print >>sys.stderr, "You must supply the output file"
            util.usage()

        mine.run_jpdg(conf, name, subject, output, no_build, jpdg_logs)

    @util.command(
        'runs slice on the subject',
        '''
        mine <subject> patterns -o <directory>

        Options
            -h, help                      print this message
            -o, output=<path>             (required) where to put the output
            -m, minimum=<int>             minimum number of call sites to mine
            -p, pattern-min=<int>%        minimum support in pattern mining
            --no-build                    don't build sub-programs
            --jpdg-logs                   show the jpdg log output
        ''',
        'ho:m:p:',
        ['help', 'no-build', 'jpdg-logs', 'minimum=', 'pattern-min=']
    )
    def patterns(argv, util, parser, conf, name, subject):

        output = None
        no_build = False
        jpdg_logs = False
        minimum = 1
        pattern_min = '50%'
        opts, args = parser(argv)
        for opt, arg in opts:
            if opt in ('-h', '--help',):
                util.usage()
            elif opt in ('-o', '--output',):
                output = arg
            elif opt in ('-m', '--minimum',):
                minimum = util.parse_int(arg)
            elif opt in ('-p', '--pattern-min',):
                pattern_min = arg
            elif opt in ('--no-build',):
                no_build = True
            elif opt in ('--jpdg-logs',):
                jpdg_logs = True

        if output is None:
            print >>sys.stderr, "You must supply the output file"
            util.usage(error_codes['option'])

        if os.path.exists(output):
            if os.path.isdir(output):
                shutil.rmtree(output)
            else:
                print >>sys.stderr, "output must be a directory"
                util.usage(error_codes['option'])

        util.assert_dir_exists(output)

        mine.build_slicer(conf)
        with Slicer() as slicer:
            patterns = mine.patterns(
                conf, name, subject, output, slicer,
                no_build, jpdg_logs, minimum, pattern_min,
            )
            mine.graphviz_patterns(patterns, output)

    opts, args = parser(argv)
    cpaths = list()
    for opt, arg in opts:
        if opt in ('-h', '--help',):
            util.usage()
        elif opt in ('-v', '--version',):
            version()
        elif opt in ('-c', '--config',):
            cpaths.append(arg)

    try:
        conf = config.Configuration(cpaths)
    except Exception, e:
        print >>sys.stderr, "Could not load the configuration"
        for err in e.args:
            print >>sys.stderr, err
        print >>sys.stderr
        util.usage(error_codes['config'])

    if len(args) == 0:
        print >>sys.stderr, "You must give a subject"
        print >>sys.stderr, "valid subjects are", conf.subjects.keys()
        for err in conf.errors:
            print >>sys.stderr, 'WARNING', err
        util.usage(error_codes['option'])

    subject_name = args[0]
    if subject_name not in conf.subjects:
        print >>sys.stderr, "Subject %s not in config files." % subject_name
        print >>sys.stderr, "valid subjects are", conf.subjects.keys()
        for err in conf.errors:
            print >>sys.stderr, 'WARNING', err
        util.usage(error_codes['option'])
    subject = conf.subjects[subject_name]

    util.run_command(args[1:], conf, subject_name, subject)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

